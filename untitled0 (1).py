# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uiuvY-F-uEksMiMc9X54q7lRib7LWAf-
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm


def VaR(r, confidence, principal=1):
    percentile = (1 - confidence) * 100
    var_value = np.percentile(r, percentile)
    out = principal * abs(var_value)
    plt.hist(r, bins=50, alpha=0.75)
    plt.title('Histogram of Stock Returns')
    plt.xlabel('Returns')
    plt.ylabel('Frequency')
    plt.show()
    return out


def percent_var(r, confidence):
    plt.hist(r, bins=50, alpha=0.75)
    plt.title('Histogram of Stock Percent Returns')
    plt.xlabel('Percent Returns')
    plt.ylabel('Frequency')
    plt.show()
    alpha = 1 - confidence
    out = np.percentile(r, (1 - alpha) * 100)
    return abs(out)


returns = np.random.normal(0, 1, 10000)
print(np.percentile(returns, 97.72))

r = np.random.normal(0.05, 0.03, 1000000)
probability2SD = norm.cdf(2)
my_confidence = probability2SD
my_percent_var = percent_var(r, my_confidence)
print(np.round(my_percent_var, 2) == 0.01)

principal = 1000
my_VaR = VaR(r, my_confidence, principal)
print(f"Value - at - Risk at {my_confidence * 100:.2f}% confidence level with principal ${principal} is ${my_VaR:.2f}")